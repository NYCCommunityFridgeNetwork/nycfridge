{"version":3,"sources":["index.js"],"names":["fs","require","readline","google","SCOPES","listMajors","auth","sheets","version","spreadsheets","values","get","spreadsheetId","range","err","res","console","log","rows","data","length","map","row","readFile","content","credentials","callback","installed","client_secret","client_id","redirect_uris","oAuth2Client","OAuth2","token","authUrl","generateAuthUrl","access_type","scope","rl","createInterface","input","process","stdin","output","stdout","question","code","close","getToken","error","setCredentials","writeFile","JSON","stringify","getNewToken","parse","authorize"],"mappings":"kIAAA,gBAAMA,EAAKC,EAAQ,IACbC,EAAWD,EAAQ,KAClBE,EAAUF,EAAQ,KAAlBE,OAGDC,EAAS,CAAC,yDAoEhB,SAASC,EAAWC,GACHH,EAAOI,OAAO,CAACC,QAAS,KAAMF,SACtCG,aAAaC,OAAOC,IAAI,CAC7BC,cAAe,+CACfC,MAAO,oBACN,SAACC,EAAKC,GACP,GAAID,EAAK,OAAOE,QAAQC,IAAI,8BAAgCH,GAC5D,IAAMI,EAAOH,EAAII,KAAKT,OAClBQ,EAAKE,QACPJ,QAAQC,IAAI,gBAEZC,EAAKG,KAAI,SAACC,GACRN,QAAQC,IAAR,UAAeK,EAAI,GAAnB,aAA0BA,EAAI,SAGhCN,QAAQC,IAAI,qBA5ElBjB,EAAGuB,SAAS,oBAAoB,SAACT,EAAKU,GACpC,GAAIV,EAAK,OAAOE,QAAQC,IAAI,oCAAqCH,IAWnE,SAAmBW,EAAaC,GAAW,IAAD,EACUD,EAAYE,UAAvDC,EADiC,EACjCA,cAAeC,EADkB,EAClBA,UAAWC,EADO,EACPA,cAC3BC,EAAe,IAAI5B,EAAOG,KAAK0B,OACjCH,EAAWD,EAAeE,EAAc,IAG5C9B,EAAGuB,SArBc,cAqBO,SAACT,EAAKmB,GAC5B,GAAInB,EAAK,OAYb,SAAqBiB,EAAcL,GACjC,IAAMQ,EAAUH,EAAaI,gBAAgB,CAC3CC,YAAa,UACbC,MAAOjC,IAETY,QAAQC,IAAI,2CAA4CiB,GACxD,IAAMI,EAAKpC,EAASqC,gBAAgB,CAClCC,MAAOC,EAAQC,MACfC,OAAQF,EAAQG,SAElBN,EAAGO,SAAS,wCAAwC,SAACC,GACnDR,EAAGS,QACHhB,EAAaiB,SAASF,GAAM,SAAChC,EAAKmB,GAChC,GAAInB,EAAK,OAAOE,QAAQiC,MAAM,8CAA+CnC,GAC7EiB,EAAamB,eAAejB,GAE5BjC,EAAGmD,UAlDU,aAkDYC,KAAKC,UAAUpB,IAAQ,SAACnB,GAC/C,GAAIA,EAAK,OAAOE,QAAQiC,MAAMnC,GAC9BE,QAAQC,IAAI,kBApDD,iBAsDbS,EAASK,SAhCKuB,CAAYvB,EAAcL,GAC1CK,EAAamB,eAAeE,KAAKG,MAAMtB,IACvCP,EAASK,MAlBXyB,CAAUJ,KAAKG,MAAM/B,GAAUnB,Q","file":"static/js/main.a2821aa0.chunk.js","sourcesContent":["const fs = require('fs');\nconst readline = require('readline');\nconst {google} = require('googleapis');\n\n// If modifying these scopes, delete token.json.\nconst SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly'];\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nconst TOKEN_PATH = 'token.json';\n\n// Load client secrets from a local file.\nfs.readFile('credentials.json', (err, content) => {\n  if (err) return console.log('Error loading client secret file:', err);\n  // Authorize a client with credentials, then call the Google Sheets API.\n  authorize(JSON.parse(content), listMajors);\n});\n\n/**\n * Create an OAuth2 client with the given credentials, and then execute the\n * given callback function.\n * @param {Object} credentials The authorization client credentials.\n * @param {function} callback The callback to call with the authorized client.\n */\nfunction authorize(credentials, callback) {\n  const {client_secret, client_id, redirect_uris} = credentials.installed;\n  const oAuth2Client = new google.auth.OAuth2(\n      client_id, client_secret, redirect_uris[0]);\n\n  // Check if we have previously stored a token.\n  fs.readFile(TOKEN_PATH, (err, token) => {\n    if (err) return getNewToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token));\n    callback(oAuth2Client);\n  });\n}\n\n/**\n * Get and store new token after prompting for user authorization, and then\n * execute the given callback with the authorized OAuth2 client.\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\n * @param {getEventsCallback} callback The callback for the authorized client.\n */\nfunction getNewToken(oAuth2Client, callback) {\n  const authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES,\n  });\n  console.log('Authorize this app by visiting this url:', authUrl);\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n  rl.question('Enter the code from that page here: ', (code) => {\n    rl.close();\n    oAuth2Client.getToken(code, (err, token) => {\n      if (err) return console.error('Error while trying to retrieve access token', err);\n      oAuth2Client.setCredentials(token);\n      // Store the token to disk for later program executions\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {\n        if (err) return console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}\n\n/**\n * Prints the names and majors of students in a sample spreadsheet:\n * @see https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit\n * @param {google.auth.OAuth2} auth The authenticated Google OAuth client.\n */\nfunction listMajors(auth) {\n  const sheets = google.sheets({version: 'v4', auth});\n  sheets.spreadsheets.values.get({\n    spreadsheetId: '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms',\n    range: 'Class Data!A2:E',\n  }, (err, res) => {\n    if (err) return console.log('The API returned an error: ' + err);\n    const rows = res.data.values;\n    if (rows.length) {\n      console.log('Name, Major:');\n      // Print columns A and E, which correspond to indices 0 and 4.\n      rows.map((row) => {\n        console.log(`${row[0]}, ${row[4]}`);\n      });\n    } else {\n      console.log('No data found.');\n    }\n  });\n}"],"sourceRoot":""}